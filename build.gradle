// Colossal pipe build script - uses Gradle 0.9
// to build: gradle jar
apply plugin: 'java'
apply plugin: 'eclipse'

repositories {
    mavenCentral()
    flatDir name: 'localRepository', dirs: 'lib'
}
dependencies {
    compile group:'org.apache.hadoop', name: 'hadoop-core', version: '0.20.2'
    compile group: 'org.apache.avro', name:'avro', version:'1.5.0-SNAPSHOT' 
    compile group:'org.apache.commons', name:'commons-email', version: '1.2'
    compile group:'commons-lang', name:'commons-lang', version: '2.4'    
    compile group: 'args4j', name: 'args4j', version: '2.0.12'
    compile group: 'joda-time', name: 'joda-time', version: '1.6.1'
    compile group:'com.thoughtworks.paranamer', name:'paranamer', version:'2.2'
    compile group:'org.codehaus.jackson', name:'jackson-core-asl', version:'1.4.2'
    compile group:'org.codehaus.jackson', name:'jackson-mapper-asl', version:'1.4.2'
    testCompile group: 'junit', name: 'junit', version: '4.+'
}
skipJars = [ "hadoop", "log", "avalon", "servlet", "commons-logging", "junit", "jline", "jetty", "jasper", "commons-cli", 
"javax", "taglibs", "jdt", "commons-httpclient", "commons-net", "oro", "jsp", "ant", "kfs", "hsqldb", "jets3t", "commons-el" ]
skipJar = {
   for (j in skipJars) if (it.startsWith(j)) return true;
   return false;
}
jar.doFirst {
    merge = []
    for(file in configurations.compile) {
        if (!skipJar(file.name))
           merge.add(file.isDirectory() ? file : zipTree(file))
    }
    from merge
}
